package Perpustakaan.ui;
import Perpustakaan.model.Buku;
import Perpustakaan.model.BukuManager;
import static Perpustakaan.model.BukuManager.listbuku;
import static Perpustakaan.model.BukuManager.tablemodel;
import config.CheckConnection;
import config.ConnectionHelper;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import java.sql.PreparedStatement;
import javax.swing.JOptionPane;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author YOGA SAPUTRA
 */
public class ShowBookJframe extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public ShowBookJframe() {
        initComponents();
        initTablebook();
        showAllBook();
        loadbook();
        setLocationRelativeTo(null);
    }
     public static  DefaultTableModel tablemodel;
        public static List<Buku> listbuku;
        private void initTablebook(){
            String[] bookcolumns = new String[]{"ID" , "Judul", "Pengarang", "Penerbit", "Tahun terbit"};
            int[] columnWidth = {70,190,210,90,90};
           
            tablemodel = new  DefaultTableModel(bookcolumns, 0);
            bookTable.setModel(tablemodel);
            bookTable.setRowHeight(20);
            
            int  i =0;
            for(int width : columnWidth){
                TableColumn column = bookTable.getColumnModel().getColumn(i++);
                column.setMaxWidth(width);
                column.setMaxWidth(width);
                column.setPreferredWidth(width);
            }
        }
        
          public static List<Buku> showAllBook() {
            List<Buku> bukuList = new ArrayList<>();
        try {
            Connection conn = ConnectionHelper.getConnection();
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("Select * from buku");
            while (rs.next()) {                
                Buku buku = new Buku(); 
                buku.setId_buku(Integer.parseInt(rs.getString("id_buku")));
                buku.setJudul_buku(rs.getString("judul_buku"));
                buku.setPengarang(rs.getString("Pengarang"));
                buku.setPenerbit(rs.getString("penerbit"));
                
                buku.setTahun_terbit(Integer.parseInt(rs.getString("tahun_terbit")));
                
                bukuList.add(buku);
            }
        } catch (SQLException e) {
            Logger.getLogger(CheckConnection.class.getName()).log(Level.SEVERE,null,e);
        }
    return bukuList;
    }    
          public static void loadbook(){
        listbuku = new ArrayList<>();
        listbuku = new  BukuManager().showAllBook();
        tablemodel.setRowCount(0);
        listbuku.forEach(buku ->{
            tablemodel.addRow(new Object[]{
                buku.getId_buku(),
                buku.getJudul_buku(),
                buku.getPengarang(),
                buku.getPenerbit(),
                buku.getTahun_terbit()
        });
        });
    }
//       private void deleteBuku() {
//    int selectedRow = bookTable.getSelectedRow();
//    Buku selectedBuku = bukuList.get(selectedRow);
//    int confirm = JOptionPane.showConfirmDialog(this, "Yakin Hapus"+selectedBuku.getJudulBuku()+" ?");
//    if (confirm == JOptionPane.YES_OPTION) {
//        BukuManager= new BukuManager();
//        try {
//            datasource.delete(selectedBuku);
//            tableModel.removeRow(selectedRow);
//            bukuList.remove(selectedBuku);
//            showSucceed("Data buku berhasil dihapus");
//        } catch (SQLException e) {
//            showSucceed("Data buku gagal dihapus");
//            e.printStackTrace();
//        }
//    }
          
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        bookTable = new javax.swing.JTable();
        btnrefresh = new javax.swing.JButton();
        btnadd = new javax.swing.JButton();
        btnupdate = new javax.swing.JButton();
        btndelete = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        bookTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        bookTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(bookTable);

        jScrollPane3.setViewportView(jScrollPane1);

        btnrefresh.setText("Refresh");

        btnadd.setText("Add");

        btnupdate.setText("Update");

        btndelete.setText("Delete");
        btndelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndeleteActionPerformed(evt);
            }
        });

        jLabel1.setText("Data Buku");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(114, Short.MAX_VALUE)
                .addComponent(btnrefresh)
                .addGap(184, 184, 184)
                .addComponent(btnadd)
                .addGap(108, 108, 108)
                .addComponent(btnupdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btndelete)
                .addContainerGap())
            .addComponent(jScrollPane3)
            .addGroup(layout.createSequentialGroup()
                .addGap(296, 296, 296)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnrefresh)
                    .addComponent(btnadd)
                    .addComponent(btnupdate)
                    .addComponent(btndelete))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bookTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_bookTableMouseClicked

    private void btndeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndeleteActionPerformed
        // TODO add your handling code here:
     DefaultTableModel model1 = (DefaultTableModel) bookTable.getModel();
        int selectedRowIndex = bookTable.getSelectedRow();
        model1.removeRow(selectedRowIndex);
try {
      Connection conn = ConnectionHelper.getConnection();
            Statement st = conn.createStatement();
    String sql = "DELETE from buku where id_buku='" +btndelete.getText() + "'";
    st.executeUpdate(sql);

} catch (Exception ex) {
    System.err.println(ex);
}
        
    }//GEN-LAST:event_btndeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShowBookJframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShowBookJframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShowBookJframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShowBookJframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ShowBookJframe().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable bookTable;
    private javax.swing.JButton btnadd;
    private javax.swing.JButton btndelete;
    private javax.swing.JButton btnrefresh;
    private javax.swing.JButton btnupdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
